generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Pick {
  id        String   @id(map: "pick_pkey") @default(uuid())
  userId    String
  gameId    String
  teamIndex Int
  createdAt DateTime @default(now()) @db.Timestamp(6)
  Game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade, map: "pick_gameid_fkey")

  @@index([gameId], map: "pick_gameid_idx")
}

model Game {
  id          String    @id(map: "game_pkey")
  team1Name   String
  team2Name   String
  team1Logo   String?
  team2Logo   String?
  won         Int?
  final_score String?
  winner      Boolean?
  gameDate    DateTime? @db.Date
  Pick        Pick[]
}

model admins {
  admin_id Int @id @default(autoincrement())
}

model contests {
  id               Int      @id @default(autoincrement())
  title            String   @db.VarChar(100)
  start_date       DateTime @db.Timestamptz(6)
  end_date         DateTime @db.Timestamptz(6)
  prize            Int?     @default(0)
  status           String
  description      String
  category         String
  participants     Int      @default(0)
  max_participants Int
  max_entries      Int
  current_entries  Int      @default(0)
  rank             Int?
  points           Int?

  @@index([title], map: "contests_contest_name_key")
}

model influencers {
  user_id        Int     @id
  follower_count Int?    @default(0)
  user_handle    String?
  users          users   @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model leaderboard_entries {
  entry_id       Int       @id @default(autoincrement())
  user_id        Int
  leaderboard_id Int
  rank           Int
  points         Int
  start_date     DateTime? @default(now()) @db.Timestamp(6)
  users          users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "user_fkey")

  @@unique([user_id, leaderboard_id], map: "single_user_per_leaderboard")
  @@index([rank], map: "idx_entries_by_rank")
}

model leaderboards {
  leaderboard_id Int      @id @default(autoincrement())
  start_date     DateTime @default(now()) @db.Timestamp(6)
  name           String   @db.VarChar(100)
  sport          String   @db.VarChar(50)
  week           Int
  description    String   @default("")
  year           Int      @default(dbgenerated("(EXTRACT(year FROM start_date))::integer"))

  @@unique([sport, week], map: "1_leaderboard_per_sport&week")
}

model users {
  user_id             Int                   @id @default(autoincrement())
  username            String                @unique @db.VarChar(50)
  email               String                @unique @db.VarChar(100)
  role                Int
  points              Int?                  @default(0)
  rank                Int?
  start_date          DateTime              @default(now()) @db.Date
  max_points          Int                   @default(0)
  performance         Decimal               @default(0) @db.Decimal(5, 3)
  clerk_id            String                @unique @default("-1")
  password            String?               @db.VarChar(160)
  bio                 String?
  fav_team            String?
  influencers         influencers?
  leaderboard_entries leaderboard_entries[]
  picks               picks[]
}

model events {
  event_id   Int      @id @default(autoincrement())
  game_name  String   @db.VarChar(100)
  date       DateTime @db.Date
  odds       Float
  sport_type String   @db.VarChar(50)
}

model picks {
  pick_id     Int      @id @default(autoincrement())
  user_id     Int
  event_id    Int
  amount      Float
  payoff      Float?
  status      String   @db.VarChar(20)
  date_placed DateTime @db.Date
  users       users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "bets_user_id_fkey")
}
